// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4smDGpnAjxXprAJJNMsm4F
// Component: qSCo5LIBKogb6
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: N170ewgljCnaz/component
import ProductCard from "../../ProductCard"; // plasmic-import: I2Tl4s0MjH4lI/component
import Ratings from "../../Ratings"; // plasmic-import: 9LQQvRQk5Agsp/component
import AddRemoveButton from "../../AddRemoveButton"; // plasmic-import: Jken9iMDI9nE3/component
import Footer from "../../Footer"; // plasmic-import: CuoeLC8bmCrU8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wzOKwfzlFFdQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_lti_organizer_version_2.module.css"; // plasmic-import: 4smDGpnAjxXprAJJNMsm4F/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: qSCo5LIBKogb6/css

import zoomMeetingpng6JezRhrS5TQIxd from "./images/zoomMeetingpng.png"; // plasmic-import: 6jezRhrS5tQIxd/picture
import zoomLogoYNpH2HW85Ebte0 from "./images/zoomLogo.png"; // plasmic-import: yNpH2hW85Ebte0/picture
import myLearningAnalyticsRH3VytLArY2A from "./images/myLearningAnalytics.png"; // plasmic-import: rH3VYT-_lArY2a/picture
import myLaLogo9BoYtCaIrknqK from "./images/myLaLogo.png"; // plasmic-import: 9BOYtCaIrknqK_/picture
import piazzainstructorpostpngJwPStMRfspUple from "./images/piazzainstructorpostpng.png"; // plasmic-import: jwPStMRfspUPLE/picture
import piazzaLogoTX7BxAyhFPpd from "./images/piazzaLogo.png"; // plasmic-import: tX7bx--ayhFPpd/picture
import panoptoVideoPlatformInVideoQuizzing1280X662JpgNgqgxhTqKzQc6S from "./images/panoptoVideoPlatformInVideoQuizzing1280X662Jpg.jpeg"; // plasmic-import: NgqgxhTQKzQc6S/picture
import panoptoLogo2GBrjx0UjVniCmu from "./images/panoptoLogo2.png"; // plasmic-import: gBrjx0ujVNICmu/picture

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomeProps {
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  dataFetches?: PlasmicHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          {false ? (
            <input
              className={classNames(defaultcss.input, sty.textbox___1I3E0)}
              placeholder={"Some placeholder" as const}
              size={1 as const}
              type={"text" as const}
              value={"Some value" as const}
            />
          ) : null}

          <div className={classNames(defaultcss.all, sty.box__fg49F)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              withSearchBar={"withSearchBar" as const}
            />

            {false ? (
              <input
                className={classNames(defaultcss.input, sty.textbox___388TD)}
                placeholder={"Some placeholder" as const}
                size={1 as const}
                type={"text" as const}
                value={"Some value" as const}
              />
            ) : null}

            <div className={classNames(defaultcss.all, sty.box__c0Vtx)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___5SGbH
                )}
              >
                {
                  "LTI Organizer is a collection of resources to assist the instructor in using the best tools available for you and your students. "
                }
              </div>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__mJuEi)}
            >
              <ProductCard
                className={classNames("__wab_instance", sty.productCard__bdUdQ)}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__hySh9
                    )}
                  >
                    {"Provides access to the Zoom video conference platform."}
                  </div>
                }
                image={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__wDsjd)}
                    role={"img"}
                    src={zoomMeetingpng6JezRhrS5TQIxd}
                  />
                }
                logo={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__kzqR8)}
                    role={"img"}
                    src={zoomLogoYNpH2HW85Ebte0}
                  />
                }
                ratings={
                  <Ratings
                    className={classNames("__wab_instance", sty.ratings__nLoY)}
                    numReviews={"(45 Review)"}
                    stars={"four" as const}
                  />
                }
                title={"Zoom"}
                withReviews={"withReviews" as const}
              >
                <AddRemoveButton
                  className={classNames(
                    "__wab_instance",
                    sty.addRemoveButton__lgjLf
                  )}
                />
              </ProductCard>

              <ProductCard
                className={classNames("__wab_instance", sty.productCard__g1Idb)}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__o15Y
                    )}
                  >
                    {
                      "Dashboard that provides students with information about engagement with course."
                    }
                  </div>
                }
                image={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___3OnT9)}
                    role={"img"}
                    src={myLearningAnalyticsRH3VytLArY2A}
                  />
                }
                logo={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__h7JPz)}
                    role={"img"}
                    src={myLaLogo9BoYtCaIrknqK}
                  />
                }
                ratings={
                  <Ratings
                    className={classNames("__wab_instance", sty.ratings__hkhNg)}
                    numReviews={"(45 Review)"}
                    stars={"five" as const}
                  />
                }
                title={"My Learning Analytics"}
                withReviews={"withReviews" as const}
              >
                <AddRemoveButton
                  className={classNames(
                    "__wab_instance",
                    sty.addRemoveButton__h1J97
                  )}
                />
              </ProductCard>

              <ProductCard
                className={classNames("__wab_instance", sty.productCard__yivZu)}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__nlHsj
                    )}
                  >
                    {
                      "Class discussion/Q&A site with link to course navigation for Piazza discussions."
                    }
                  </div>
                }
                image={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__b5DZj)}
                    role={"img"}
                    src={piazzainstructorpostpngJwPStMRfspUple}
                  />
                }
                logo={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__az19Y)}
                    role={"img"}
                    src={piazzaLogoTX7BxAyhFPpd}
                  />
                }
                ratings={
                  <Ratings
                    className={classNames("__wab_instance", sty.ratings__fRxkY)}
                    numReviews={"(45 Review)"}
                    stars={"five" as const}
                  />
                }
                title={"Piazza"}
                withReviews={"withReviews" as const}
              >
                <AddRemoveButton
                  className={classNames(
                    "__wab_instance",
                    sty.addRemoveButton___8YI9J
                  )}
                  removeToolFromSite={"removeToolFromSite" as const}
                />
              </ProductCard>

              <ProductCard
                className={classNames(
                  "__wab_instance",
                  sty.productCard___1Jq7P
                )}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__eyUqV
                    )}
                  >
                    {"Used to record, share and manage videos."}
                  </div>
                }
                image={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__goSy)}
                    role={"img"}
                    src={
                      panoptoVideoPlatformInVideoQuizzing1280X662JpgNgqgxhTqKzQc6S
                    }
                  />
                }
                ratings={
                  <Ratings
                    className={classNames("__wab_instance", sty.ratings__gH6Qd)}
                    numReviews={"(45 Review)"}
                    stars={"three" as const}
                  />
                }
                title={"Panopto"}
                withReviews={"withReviews" as const}
              />
            </p.Stack>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>

          {false ? (
            <input
              className={classNames(defaultcss.input, sty.textbox___2YxNg)}
              placeholder={"Some placeholder" as const}
              size={1 as const}
              type={"text" as const}
              value={"Some value" as const}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "footer"],
  header: ["header"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHome__Fetches;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
