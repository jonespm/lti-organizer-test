// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4smDGpnAjxXprAJJNMsm4F
// Component: N170ewgljCnaz
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: 0VzF18p6W9qeV/component
import IconLink from "../../IconLink"; // plasmic-import: BTNrH-X8sJtFz/component
import LinkButton from "../../LinkButton"; // plasmic-import: _dAnqW-cFBjXk/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wzOKwfzlFFdQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_lti_organizer_version_2.module.css"; // plasmic-import: 4smDGpnAjxXprAJJNMsm4F/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: N170ewgljCnaz/css

import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: szdf_Jb-yNbXZI/icon
import CogIcon from "./icons/PlasmicIcon__Cog"; // plasmic-import: j6my7liRkS1mYY/icon

export type PlasmicHeader__VariantMembers = {
  expanded: "expanded";
  withSearchBar: "withSearchBar";
};

export type PlasmicHeader__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<"expanded">;
  withSearchBar?: SingleBooleanChoiceArg<"withSearchBar">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "expanded",
  "withSearchBar"
);

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  menuButton?: p.Flex<typeof MenuButton>;
};

export interface DefaultHeaderProps {
  expanded?: SingleBooleanChoiceArg<"expanded">;
  withSearchBar?: SingleBooleanChoiceArg<"withSearchBar">;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  dataFetches?: PlasmicHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__expanded]: hasVariant(variants, "expanded", "expanded")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__ffw9S, {
          [sty.box__withSearchBar__ffw9SlMkh9]: hasVariant(
            variants,
            "withSearchBar",
            "withSearchBar"
          )
        })}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton, {
              [sty.menuButton__expanded]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            expanded={
              hasVariant(variants, "expanded", "expanded") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? ("expanded" as const)
                : undefined
            }
          />
        ) : null}

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__behqa
          )}
        >
          {"LTI Organizer"}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___8KnWs)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__pUhpr)}
            icon={
              <SearchIcon
                className={classNames(defaultcss.all, sty.svg__kpR40)}
                role={"img"}
              />
            }
          />

          {(
            hasVariant(variants, "withSearchBar", "withSearchBar")
              ? true
              : false
          ) ? (
            <input
              className={classNames(defaultcss.input, sty.textbox__tiKr5, {
                [sty.textbox__withSearchBar__tiKr5LMkh9]: hasVariant(
                  variants,
                  "withSearchBar",
                  "withSearchBar"
                )
              })}
              placeholder={
                hasVariant(variants, "withSearchBar", "withSearchBar")
                  ? ("filter by keyword" as const)
                  : ("Some placeholder" as const)
              }
              size={1 as const}
              type={"text" as const}
              value={
                hasVariant(variants, "withSearchBar", "withSearchBar")
                  ? ("" as const)
                  : ("Some value" as const)
              }
            />
          ) : null}

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__vmQDc)}
            icon={
              <CogIcon
                className={classNames(defaultcss.all, sty.svg__gRo3S)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        {false ? (
          <input
            className={classNames(defaultcss.input, sty.textbox__yEzfp)}
            placeholder={"Some placeholder" as const}
            size={1 as const}
            type={"text" as const}
            value={"Some value" as const}
          />
        ) : null}
        {false ? (
          <input
            className={classNames(defaultcss.input, sty.textbox__miLm9)}
            placeholder={"Some placeholder" as const}
            size={1 as const}
            type={"text" as const}
            value={"Some value" as const}
          />
        ) : null}
      </p.Stack>

      {(
        hasVariant(variants, "expanded", "expanded") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.box__kRmA3, {
            [sty.box__expanded__kRmA3XUvxQ]: hasVariant(
              variants,
              "expanded",
              "expanded"
            )
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton___1IHas)}
            text={"Home"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__rcrMe)}
            text={"New Arrival"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__dJKrv)}
            text={"Features"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__p41Bw)}
            text={"Blog"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__ni2AY)}
            text={"Contact"}
            type={"blankGray" as const}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menuButton"],
  menuButton: ["menuButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuButton: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeader__Fetches;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
